micronaut:
  application:
    name: kafkahq
  server:
    cors:
      enabled: true
  io:
    watch:
      paths: src/main
      restart: false # enabled dev server with env vars MICRONAUT_IO_WATCH_RESTART=true
  router:
    static-resources:
      default:
        enabled: true
        mapping: "/**"
        paths: "classpath:static"
    security:
      enabled: false
    endpoints:
      login:
        enabled: true
        path: "${kafkahq.server.base-path:}/login"
      logout:
        enabled: true
        path: "${kafkahq.server.base-path:}/logout"
        get-allowed: true
    session:
      enabled: true
      login-success-target-url: "${kafkahq.server.base-path:}/"
      logout-target-url: "${kafkahq.server.base-path:}/"
      forbidden-target-url: "${kafkahq.server.base-path:}/login/forbidden"
      unauthorized-target-url: "${kafkahq.server.base-path:}/login/unauthorized"
      login-failure-target-url: "${kafkahq.server.base-path:}/login/failed"
    intercept-url-map:
      - pattern: "${kafkahq.server.base-path:}/static/**"
        access: "isAnonymous()"
  caches:
    kafka-wrapper:
      record-stats: true
      expire-after-write: 0s

endpoints:
  all:
    path: "${kafkahq.server.base-path:}"
  health:
    enabled: true
    sensitive: false
    details-visible: anonymous
  info:
    enabled: true
    sensitive: false
  metrics:
    enabled: true
    sensitive: false
    export:
      prometheus:
        enabled: true
        step: PT1M
        descriptions: true
  prometheus:
    enabled: true
    sensitive: false
  caches:
    enabled: true
    sensitive: false

jackson:
  module-scan: false

kafkahq:
  connections:
    my-cluster:
      properties:
        bootstrap.servers: localhost:9092
      schema-registry:
        url: "localhost:8085"
      connect:
        - name: connect-1
          url: "http://localhost:8083"
        - name: connect-2
          url: "http://localhost:8084"
    my-cluster2:
      properties:
        bootstrap.servers: localhost:9092
      schema-registry:
        url: "localhost:8085"
      connect:
        - name: connect-3
          url: "http://localhost:8083"
        - name: connect-4
          url: "http://localhost:8082"
  server:
    base-path: ""
    access-log:
      enabled: true
      name: org.kafkahq.log.access
      format: "[Date: {}] [Duration: {} ms] [Url: {} {} {}] [Status: {}] [Ip: {}] [Length: {}] [Port: {}]"

  clients-defaults:
    consumer:
      properties:
        max.poll.records: 50
        isolation.level: read_committed
        group.id: KafkaHQ
        enable.auto.commit: "false"
        default.api.timeout.ms: 15000

  pagination:
    page-size: 25
    threads: 16

  topic:
    default-view: HIDE_INTERNAL
    replication: 1
    retention: 86400000
    partition: 1
    internal-regexps:
      - "^_.*$"
      - "^.*_schemas$"
      - "^.*connect-config$"
      - "^.*connect-offsets$1"
      - "^.*connect-status$"
    stream-regexps:
      - "^.*-changelog$"
      - "^.*-repartition$"
      - "^.*-rekey$"
    skip-consumer-groups: false

  topic-data:
    sort: OLDEST
    size: 50
    poll-timeout: 1000

  security:
    default-groups:
      - admin
    groups:
      admin:
        roles:
          - topic/read
          - topic/insert
          - topic/delete
          - topic/config/update
          - node/read
          - node/config/update
          - topic/data/read
          - topic/data/insert
          - topic/data/delete
          - group/read
          - group/delete
          - group/offsets/update
          - registry/read
          - registry/insert
          - registry/update
          - registry/delete
          - registry/version/delete
          - acls/read
          - connect/read
          - connect/insert
          - connect/update
          - connect/delete
          - connect/state/update
      reader:
        roles:
          - topic/read
          - node/read
          - topic/data/read
          - group/read
          - registry/read
          - acls/read
          - connect/read
